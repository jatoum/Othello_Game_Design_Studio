/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Dec 10 2023 13:17:25 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'mic-react-viz/constants',
    'mic-react-viz/utils'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,    
    CONSTANTS,
    UTILS) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of BuildDescriptor.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin BuildDescriptor.
     * @constructor
     */
    function BuildDescriptor() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    BuildDescriptor.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    BuildDescriptor.prototype = Object.create(PluginBase.prototype);
    BuildDescriptor.prototype.constructor = BuildDescriptor;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    BuildDescriptor.prototype.main = function (callback) {
        const {core, logger, META, activeNode, result} = this;
        //In here we assume tht Player.0 is black player (starts first) and player x is white player
        const descriptor = {player:CONSTANTS.PLAYER.O,board:[],position2path:{}};
        const nodeHash = {};


        core.loadSubTree(activeNode)
        .then(nodes=>{
            nodes.forEach(node => {
                nodeHash[core.getPath(node)] = node;
            });
            // Update such that the current game state will always get the current player
            // We assume that the active nod ein here is fcomign from a GameState
            const currentPlayerPath = core.getPointerPath(activeNode,'currentPlayer');
            if(core.getAttribute(nodeHash[currentPlayerPath], 'name') === 'PlayerBlack') {
                descriptor.player = CONSTANTS.PLAYER.O;
            } else {
                descriptor.player = CONSTANTS.PLAYER.X;
            }
            // Check if any of the children from active node is a board
            core.getChildrenPaths(activeNode).forEach(playerOrBoard => {
                const node = nodeHash[playerOrBoard];
                if(core.isInstanceOf(node,META.Board)) {
                    descriptor.boardPath = playerOrBoard;
                }
            });
            //At any given point in time activate counting_pieces function 
            return this.invokePlugin('counting_pieces',{pluginConfig:{}});
        })
        // .win representing the number of pieces
        .then(inner => {
            const {black_count, white_count} = JSON.parse(inner.messages[0].message);
            descriptor.win = {black: black_count, white: white_count};
            descriptor.board = UTILS.getBoardDescriptor(core, META, nodeHash[descriptor.boardPath], nodeHash);
            descriptor.position2path = UTILS.getPositionHash(core, nodeHash[descriptor.boardPath], nodeHash);
            this.createMessage(activeNode, JSON.stringify(descriptor));
            result.setSuccess(true);
            callback(null, result);
        })
        .catch(e=>{
            logger.error(e);
            result.setSuccess(false);
            callback(e, null);
        });
    };

    return BuildDescriptor;
});
